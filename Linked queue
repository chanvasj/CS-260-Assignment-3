#include <iostream>

template <typename T>
class Node {
public:
  T data;
  Node<T>* next;

  Node(T val) : data(val), next(nullptr) {}
};

template <typename T>
class Queue {
private:
  Node<T>* front;
  Node<T>* rear;
  int size;

public:
 Queue() : front(nullptr), rear(nullptr), size(0) {}

  ~Queue() {
    while (front != nullptr) {
      Node<T>* temp = front;
      front = front->next;
      delete temp;
    }
  }

  void enqueue(T val) {
    Node<T>* newNode = new Node<T>(val);
    if (rear == nullptr) {
      front = rear = newNode;
    } else {
      rear->next = newNode;
      rear = newNode;
    }
    size++;
}

T peek() {
  if (isEmpty()) {
      throw std::out_of_range("Queue is empty");
  }
  return front->data;
}

bool isEmpty() {
  return size == 0;
}

int getSize() {
  return size;
  }
};

int main() {
    Queue<int> q;
    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);

    std::cout << "Front element: " << q.peek() << std::endl;
    std::cout << "Queue size: " << q.getSize() << std::endl;

    std::cout << "Dequeued element: " << q.dequeue() << std::endl;
    std::cout << "Dequeued element: " << q.dequeue() << std::endl;

    std::cout << "Front element: " << q.peek() << std::endl;
    std::cout << "Queue size: " << q.getSize() << std::endl;

    return 0;
}



